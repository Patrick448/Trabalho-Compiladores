// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Exemplo.jflex


 /*  Esta seção é copiada antes da declaração da classe do analisador léxico.
  *  É nesta seção que se deve incluir imports e declaração de pacotes.
  *  Neste exemplo não temos nada a incluir nesta seção.
  */
  

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1d00\1\u1e00"+
    "\1\u1f00\1\u2000\2\u2100\1\u2200\7\u2100\1\u2300\1\u2400\1\u2500"+
    "\1\u2100\1\u2600\1\u2700\2\u2100\31\u1100\1\u2800\121\u1100\1\u2900"+
    "\4\u1100\1\u2a00\1\u1100\1\u2b00\1\u2c00\1\u2d00\1\u2e00\1\u2f00"+
    "\1\u3000\53\u1100\1\u3100\10\u3200\31\u2100\1\u1100\1\u3300\1\u3400"+
    "\1\u1100\1\u3500\1\u3600\1\u3700\1\u3800\1\u2100\1\u3900\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u1100\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u2100\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00\1\u2100"+
    "\1\u5000\1\u5100\1\u5200\1\u2100\3\u1100\1\u5300\1\u5400\1\u5500"+
    "\12\u2100\4\u1100\1\u5600\17\u2100\2\u1100\1\u5700\41\u2100\2\u1100"+
    "\1\u5800\1\u5900\2\u2100\1\u5a00\1\u5b00\27\u1100\1\u5c00\2\u1100"+
    "\1\u5d00\45\u2100\1\u1100\1\u5e00\1\u5f00\11\u2100\1\u6000\27\u2100"+
    "\1\u6100\1\u6200\1\u6300\1\u6400\11\u2100\1\u6500\1\u6600\5\u2100"+
    "\1\u6700\1\u6800\4\u2100\1\u6900\2\u2100\1\u6a00\16\u2100\246\u1100"+
    "\1\u6b00\20\u1100\1\u6c00\1\u6d00\25\u1100\1\u6e00\34\u1100\1\u6f00"+
    "\14\u2100\2\u1100\1\u7000\u0e05\u2100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\3\0\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\12\22\1\23\1\24"+
    "\1\25\1\26\1\27\2\0\32\30\1\31\1\32\1\33"+
    "\1\0\1\34\1\0\1\35\3\36\1\37\1\40\5\36"+
    "\1\41\1\36\1\42\3\36\1\43\1\44\1\45\1\46"+
    "\5\36\1\47\1\34\1\50\7\0\1\3\44\0\1\36"+
    "\12\0\1\36\4\0\1\36\5\0\27\30\1\0\7\30"+
    "\30\36\1\0\10\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\2\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\2\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\2\30\1\36\1\30\1\36\1\30\3\36\2\30"+
    "\1\36\1\30\1\36\2\30\1\36\3\30\2\36\4\30"+
    "\1\36\2\30\1\36\3\30\3\36\2\30\1\36\2\30"+
    "\1\36\1\30\1\36\1\30\1\36\2\30\1\36\1\30"+
    "\2\36\1\30\1\36\2\30\1\36\3\30\1\36\1\30"+
    "\1\36\2\30\2\36\1\51\1\30\3\36\4\51\1\30"+
    "\1\51\1\36\1\30\1\51\1\36\1\30\1\51\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\2\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\2\36\1\30\1\51\1\36\1\30\1\36\3\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\7\36\2\30\1\36\2\30\2\36\1\30"+
    "\1\36\4\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\105\36\1\51\44\36\7\51\2\36\4\0"+
    "\14\51\16\0\5\36\7\0\1\51\1\0\1\51\126\0"+
    "\1\52\52\0\1\30\1\36\1\30\1\36\1\51\1\0"+
    "\1\30\1\36\2\0\4\36\1\0\1\30\6\0\1\30"+
    "\1\0\3\30\1\0\1\30\1\0\2\30\1\36\21\30"+
    "\1\0\11\30\43\36\1\30\2\36\3\30\3\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\5\36\1\30"+
    "\1\36\1\0\1\30\1\36\2\30\2\36\63\30\60\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\10\0\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\2\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\2\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\0"+
    "\46\30\2\0\1\51\6\0\51\36\107\0\33\51\4\0"+
    "\4\51\55\0\53\51\25\0\12\22\4\0\2\51\1\0"+
    "\143\51\1\0\1\51\17\0\2\51\7\0\2\51\12\22"+
    "\3\51\2\0\1\51\20\0\1\51\1\0\36\51\35\0"+
    "\131\51\13\0\1\51\16\0\12\22\41\51\11\0\2\51"+
    "\4\0\1\51\5\0\26\51\4\0\1\51\11\0\1\51"+
    "\3\0\1\51\27\0\31\51\7\0\13\51\65\0\25\51"+
    "\1\0\10\51\106\0\66\51\3\0\1\51\22\0\1\51"+
    "\7\0\12\51\4\0\12\22\1\0\20\51\4\0\10\51"+
    "\2\0\2\51\2\0\26\51\1\0\7\51\1\0\1\51"+
    "\3\0\4\51\3\0\1\51\20\0\1\51\15\0\2\51"+
    "\1\0\3\51\4\0\12\22\2\51\12\0\1\51\10\0"+
    "\6\51\4\0\2\51\2\0\26\51\1\0\7\51\1\0"+
    "\2\51\1\0\2\51\1\0\2\51\37\0\4\51\1\0"+
    "\1\51\7\0\12\22\2\0\3\51\20\0\11\51\1\0"+
    "\3\51\1\0\26\51\1\0\7\51\1\0\2\51\1\0"+
    "\5\51\3\0\1\51\22\0\1\51\17\0\2\51\4\0"+
    "\12\22\11\0\1\51\13\0\10\51\2\0\2\51\2\0"+
    "\26\51\1\0\7\51\1\0\2\51\1\0\5\51\3\0"+
    "\1\51\36\0\2\51\1\0\3\51\4\0\12\22\1\0"+
    "\1\51\21\0\1\51\1\0\6\51\3\0\3\51\1\0"+
    "\4\51\3\0\2\51\1\0\1\51\1\0\2\51\3\0"+
    "\2\51\3\0\3\51\3\0\14\51\26\0\1\51\25\0"+
    "\12\22\25\0\10\51\1\0\3\51\1\0\27\51\1\0"+
    "\20\51\3\0\1\51\32\0\3\51\5\0\2\51\4\0"+
    "\12\22\20\0\1\51\4\0\10\51\1\0\3\51\1\0"+
    "\27\51\1\0\12\51\1\0\5\51\3\0\1\51\40\0"+
    "\1\51\1\0\2\51\4\0\12\22\1\0\2\51\22\0"+
    "\10\51\1\0\3\51\1\0\51\51\2\0\1\51\20\0"+
    "\1\51\5\0\3\51\10\0\3\51\4\0\12\22\12\0"+
    "\6\51\5\0\22\51\3\0\30\51\1\0\11\51\1\0"+
    "\1\51\2\0\7\51\37\0\12\22\21\0\60\51\1\0"+
    "\2\51\14\0\7\51\11\0\12\22\47\0\2\51\1\0"+
    "\1\51\1\0\5\51\1\0\30\51\1\0\1\51\1\0"+
    "\12\51\1\0\2\51\11\0\1\51\2\0\5\51\1\0"+
    "\1\51\11\0\12\22\2\0\4\51\40\0\1\51\37\0"+
    "\12\22\26\0\10\51\1\0\44\51\33\0\5\51\163\0"+
    "\53\51\24\0\1\51\12\22\6\0\6\51\4\0\4\51"+
    "\3\0\1\51\3\0\2\51\7\0\3\51\4\0\15\51"+
    "\14\0\1\51\1\0\12\22\6\0\46\30\1\0\1\30"+
    "\5\0\1\30\2\0\53\36\1\0\1\51\3\36\u0149\51"+
    "\1\0\4\51\2\0\7\51\1\0\1\51\1\0\4\51"+
    "\2\0\51\51\1\0\4\51\2\0\41\51\1\0\4\51"+
    "\2\0\7\51\1\0\1\51\1\0\4\51\2\0\17\51"+
    "\1\0\71\51\1\0\4\51\2\0\103\51\45\0\20\51"+
    "\20\0\126\30\2\0\6\36\3\0\u016c\51\2\0\21\51"+
    "\1\0\32\51\5\0\113\51\6\0\10\51\7\0\15\51"+
    "\1\0\4\51\16\0\22\51\16\0\22\51\16\0\15\51"+
    "\1\0\3\51\17\0\64\51\43\0\1\51\4\0\1\51"+
    "\3\0\12\22\46\0\12\22\6\0\131\51\7\0\5\51"+
    "\2\0\42\51\1\0\1\51\5\0\106\51\12\0\37\51"+
    "\47\0\12\22\36\51\2\0\5\51\13\0\54\51\4\0"+
    "\32\51\6\0\12\22\46\0\27\51\11\0\65\51\53\0"+
    "\12\22\6\0\12\22\15\0\1\51\135\0\57\51\21\0"+
    "\7\51\4\0\12\22\51\0\36\51\15\0\2\51\12\22"+
    "\54\51\32\0\44\51\34\0\12\22\3\0\3\51\12\22"+
    "\44\51\2\0\11\36\7\0\53\30\2\0\3\30\51\0"+
    "\4\51\1\0\6\51\1\0\2\51\3\0\1\51\5\0"+
    "\300\36\100\0\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\11\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\11\36\10\30\6\36\2\0\6\30\2\0\10\36"+
    "\10\30\10\36\10\30\6\36\2\0\6\30\2\0\10\36"+
    "\1\0\1\30\1\0\1\30\1\0\1\30\1\0\1\30"+
    "\10\36\10\30\16\36\2\0\10\36\10\51\10\36\10\51"+
    "\10\36\10\51\5\36\1\0\2\36\4\30\1\51\1\0"+
    "\1\36\3\0\3\36\1\0\2\36\4\30\1\51\3\0"+
    "\4\36\2\0\2\36\4\30\4\0\10\36\5\30\5\0"+
    "\3\36\1\0\2\36\4\30\1\51\53\0\2\3\107\0"+
    "\1\36\15\0\1\36\20\0\15\36\145\0\1\30\4\0"+
    "\1\30\2\0\1\36\3\30\2\36\3\30\1\36\1\0"+
    "\1\30\3\0\5\30\6\0\1\30\1\0\1\30\1\0"+
    "\1\30\1\0\4\30\1\0\1\36\4\30\1\36\4\51"+
    "\1\36\2\0\2\36\2\30\5\0\1\30\4\36\4\0"+
    "\1\36\21\0\20\53\20\52\3\0\1\30\1\36\u0231\0"+
    "\32\53\32\52\26\0\57\30\1\0\57\36\1\0\1\30"+
    "\1\36\3\30\2\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\4\30\1\36\1\30\2\36\1\30\10\36\3\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\2\36\6\0\1\30\1\36\1\30\1\36"+
    "\3\0\1\30\1\36\14\0\46\36\1\0\1\36\5\0"+
    "\1\36\2\0\70\51\7\0\1\51\20\0\27\51\11\0"+
    "\7\51\1\0\7\51\1\0\7\51\1\0\7\51\1\0"+
    "\7\51\1\0\7\51\1\0\7\51\1\0\7\51\120\0"+
    "\1\51\325\0\2\51\52\0\5\51\5\0\2\51\4\0"+
    "\126\51\6\0\3\51\1\0\132\51\1\0\4\51\5\0"+
    "\53\51\1\0\136\51\21\0\33\51\65\0\306\51\112\0"+
    "\360\51\20\0\215\51\103\0\56\51\2\0\15\51\3\0"+
    "\20\51\12\22\2\51\24\0\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\51\20\0\1\51\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\3\36\2\0\106\51\61\0\11\51\2\0\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\3\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\12\36\1\30\1\36\1\30\1\36\2\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\51\2\0\1\30\1\36\1\30\1\36\1\51\1\30"+
    "\1\36\1\30\3\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\5\30"+
    "\1\36\5\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\2\0\1\30\1\36"+
    "\3\30\60\0\1\51\3\36\7\51\1\0\3\51\1\0"+
    "\4\51\1\0\27\51\35\0\64\51\16\0\62\51\34\0"+
    "\12\22\30\0\6\51\3\0\1\51\1\0\2\51\1\0"+
    "\12\22\34\51\12\0\27\51\31\0\35\51\7\0\57\51"+
    "\34\0\1\51\12\22\6\0\5\51\1\0\12\51\12\22"+
    "\5\51\1\0\51\51\27\0\3\51\1\0\10\51\4\0"+
    "\12\22\6\0\27\51\3\0\1\51\3\0\62\51\1\0"+
    "\1\51\3\0\2\51\2\0\5\51\2\0\1\51\1\0"+
    "\1\51\30\0\3\51\2\0\13\51\7\0\3\51\14\0"+
    "\6\51\2\0\6\51\2\0\6\51\11\0\7\51\1\0"+
    "\7\51\1\0\53\36\1\0\14\36\10\0\120\36\43\51"+
    "\15\0\12\22\6\0\244\51\14\0\27\51\4\0\61\51"+
    "\4\0\u0100\3\156\51\2\0\152\51\46\0\7\36\14\0"+
    "\5\36\5\0\1\51\1\0\12\51\1\0\15\51\1\0"+
    "\5\51\1\0\1\51\1\0\2\51\1\0\2\51\1\0"+
    "\154\51\41\0\153\51\22\0\100\51\2\0\66\51\50\0"+
    "\14\51\164\0\5\51\1\0\207\51\23\0\12\22\7\0"+
    "\32\30\6\0\32\36\13\0\131\51\3\0\6\51\2\0"+
    "\6\51\2\0\6\51\2\0\3\51\43\0\14\51\1\0"+
    "\32\51\1\0\23\51\1\0\2\51\1\0\17\51\2\0"+
    "\16\51\42\0\173\51\205\0\35\51\3\0\61\51\57\0"+
    "\40\51\15\0\24\51\1\0\10\51\6\0\46\51\12\0"+
    "\36\51\2\0\44\51\4\0\10\51\60\0\50\30\50\36"+
    "\116\51\2\0\12\22\6\0\44\30\4\0\44\36\4\0"+
    "\50\51\10\0\64\51\234\0\67\51\11\0\26\51\12\0"+
    "\10\51\230\0\6\51\2\0\1\51\1\0\54\51\1\0"+
    "\2\51\3\0\1\51\2\0\27\51\12\0\27\51\11\0"+
    "\37\51\101\0\23\51\1\0\2\51\12\0\26\51\12\0"+
    "\32\51\106\0\70\51\6\0\2\51\100\0\1\51\17\0"+
    "\4\51\1\0\3\51\1\0\35\51\52\0\35\51\3\0"+
    "\35\51\43\0\10\51\1\0\34\51\33\0\66\51\12\0"+
    "\26\51\12\0\23\51\15\0\22\51\156\0\111\51\67\0"+
    "\63\30\15\0\63\36\15\0\44\51\14\0\12\22\306\0"+
    "\35\51\12\0\1\51\10\0\26\51\232\0\27\51\14\0"+
    "\65\51\56\0\12\22\23\0\55\51\40\0\31\51\7\0"+
    "\12\22\11\0\44\51\17\0\12\22\4\0\1\51\13\0"+
    "\43\51\3\0\1\51\14\0\60\51\16\0\4\51\13\0"+
    "\12\22\1\51\1\0\1\51\43\0\22\51\1\0\31\51"+
    "\124\0\7\51\1\0\1\51\1\0\4\51\1\0\17\51"+
    "\1\0\12\51\7\0\57\51\21\0\12\22\13\0\10\51"+
    "\2\0\2\51\2\0\26\51\1\0\7\51\1\0\2\51"+
    "\1\0\5\51\3\0\1\51\22\0\1\51\14\0\5\51"+
    "\236\0\65\51\22\0\4\51\5\0\12\22\5\0\1\51"+
    "\40\0\60\51\24\0\2\51\1\0\1\51\10\0\12\22"+
    "\246\0\57\51\51\0\4\51\44\0\60\51\24\0\1\51"+
    "\13\0\12\22\46\0\53\51\15\0\1\51\7\0\12\22"+
    "\66\0\33\51\25\0\12\22\306\0\54\51\164\0\40\30"+
    "\40\36\12\22\25\0\1\51\240\0\10\51\2\0\47\51"+
    "\20\0\1\51\1\0\1\51\34\0\1\51\12\0\50\51"+
    "\7\0\1\51\25\0\1\51\13\0\56\51\23\0\1\51"+
    "\42\0\71\51\7\0\11\51\1\0\45\51\21\0\1\51"+
    "\17\0\12\22\30\0\36\51\160\0\7\51\1\0\2\51"+
    "\1\0\46\51\25\0\1\51\11\0\12\22\6\0\6\51"+
    "\1\0\2\51\1\0\40\51\16\0\1\51\7\0\12\22"+
    "\u0136\0\23\51\15\0\232\51\346\0\304\51\274\0\57\51"+
    "\321\0\107\51\271\0\71\51\7\0\37\51\1\0\12\22"+
    "\146\0\36\51\22\0\60\51\20\0\4\51\14\0\12\22"+
    "\11\0\25\51\5\0\23\51\260\0\40\30\40\36\200\0"+
    "\113\51\5\0\1\51\102\0\15\51\100\0\2\51\1\0"+
    "\1\51\34\0\370\51\10\0\363\51\15\0\37\51\61\0"+
    "\3\51\21\0\4\51\10\0\u018c\51\4\0\153\51\5\0"+
    "\15\51\3\0\11\51\7\0\12\51\146\0\32\30\32\36"+
    "\32\30\7\36\1\0\22\36\32\30\32\36\1\30\1\0"+
    "\2\30\2\0\1\30\2\0\2\30\2\0\4\30\1\0"+
    "\10\30\4\36\1\0\1\36\1\0\7\36\1\0\13\36"+
    "\32\30\32\36\2\30\1\0\4\30\2\0\10\30\1\0"+
    "\7\30\1\0\32\36\2\30\1\0\4\30\1\0\5\30"+
    "\1\0\1\30\3\0\7\30\1\0\32\36\32\30\32\36"+
    "\32\30\32\36\32\30\32\36\32\30\32\36\32\30\32\36"+
    "\32\30\34\36\2\0\31\30\1\0\31\36\1\0\6\36"+
    "\31\30\1\0\31\36\1\0\6\36\31\30\1\0\31\36"+
    "\1\0\6\36\31\30\1\0\31\36\1\0\6\36\31\30"+
    "\1\0\31\36\1\0\6\36\1\30\1\36\2\0\62\22"+
    "\55\51\12\0\7\51\2\0\12\22\4\0\1\51\u0171\0"+
    "\54\51\4\0\12\22\6\0\305\51\73\0\42\30\42\36"+
    "\7\0\1\51\4\0\12\22\246\0\4\51\1\0\33\51"+
    "\1\0\2\51\1\0\1\51\2\0\1\51\1\0\12\51"+
    "\1\0\4\51\1\0\1\51\1\0\1\51\6\0\1\51"+
    "\4\0\1\51\1\0\1\51\1\0\1\51\1\0\3\51"+
    "\1\0\2\51\1\0\1\51\2\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\2\51"+
    "\1\0\1\51\2\0\4\51\1\0\7\51\1\0\4\51"+
    "\1\0\4\51\1\0\1\51\1\0\12\51\1\0\21\51"+
    "\5\0\3\51\1\0\5\51\1\0\21\51\164\0\32\53"+
    "\6\0\32\53\6\0\32\53\166\0\327\51\51\0\65\51"+
    "\13\0\336\51\2\0\u0182\51\16\0\u0131\51\37\0\36\51"+
    "\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[28928];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\2\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\4\26"+
    "\1\27\1\30\1\31\1\32\3\0\1\33\1\0\1\34"+
    "\1\35\3\26\1\0\1\36\3\26\1\0\1\37\1\40"+
    "\1\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[53];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\130\0\204\0\260\0\130\0\334"+
    "\0\u0108\0\130\0\130\0\130\0\130\0\130\0\u0134\0\u0160"+
    "\0\130\0\u018c\0\u01b8\0\130\0\130\0\u01e4\0\130\0\u0210"+
    "\0\130\0\130\0\u023c\0\u0268\0\u0294\0\u02c0\0\u02ec\0\130"+
    "\0\130\0\130\0\u0318\0\u0344\0\u0370\0\u0160\0\u0160\0\130"+
    "\0\130\0\u039c\0\u03c8\0\u03f4\0\u0420\0\130\0\u044c\0\u0478"+
    "\0\u04a4\0\u04d0\0\u023c\0\u023c\0\u0420";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[53];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\3\1\32\1\3\3\33\1\34\1\33\1\35"+
    "\2\33\1\36\1\33\1\37\1\40\1\3\1\33\1\30"+
    "\54\3\56\0\1\4\77\0\1\41\35\0\1\42\65\0"+
    "\1\43\5\0\1\43\1\0\1\44\2\0\12\43\2\0"+
    "\1\43\21\0\1\45\56\0\1\46\51\0\1\47\1\0"+
    "\1\22\54\0\1\50\56\0\1\51\47\0\1\30\5\0"+
    "\1\30\3\0\13\30\2\0\1\30\24\0\1\33\5\0"+
    "\1\33\3\0\13\33\2\0\1\33\24\0\1\33\5\0"+
    "\1\33\3\0\1\33\1\52\11\33\2\0\1\33\24\0"+
    "\1\33\5\0\1\33\3\0\12\33\1\53\2\0\1\33"+
    "\24\0\1\33\5\0\1\33\3\0\7\33\1\54\3\33"+
    "\2\0\1\33\21\0\1\55\45\0\1\56\53\0\1\43"+
    "\20\0\1\43\7\0\2\43\1\0\1\43\6\0\2\45"+
    "\1\4\2\0\1\5\46\45\22\0\1\33\5\0\1\33"+
    "\3\0\5\33\1\57\5\33\2\0\1\33\24\0\1\33"+
    "\5\0\1\33\3\0\5\33\1\60\5\33\2\0\1\33"+
    "\24\0\1\33\5\0\1\33\3\0\12\33\1\61\2\0"+
    "\1\33\2\0\2\55\4\0\11\55\1\62\34\55\22\0"+
    "\1\33\5\0\1\33\3\0\10\33\1\61\2\33\2\0"+
    "\1\33\24\0\1\33\5\0\1\33\3\0\5\33\1\63"+
    "\5\33\2\0\1\33\24\0\1\33\5\0\1\33\3\0"+
    "\3\33\1\64\7\33\2\0\1\33\2\0\2\55\4\0"+
    "\11\55\1\62\30\55\1\65\3\55";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1276];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\2\1\1\11\2\1\5\11\2\1\1\11"+
    "\2\1\2\11\1\1\1\11\1\1\2\11\5\1\3\11"+
    "\3\0\1\1\1\0\2\11\3\1\1\0\1\11\3\1"+
    "\1\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[53];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    
    /* Código arbitrário pode ser inserido diretamente no analisador dessa forma. 
     * Aqui podemos declarar variáveis e métodos adicionais que julgarmos necessários. 
     */
    private int ntk;
    
    public int readedTokens(){
       return ntk;
    }
    private Token symbol(TOKEN_TYPE t) {
        ntk++;
        return new Token(t,yytext(), yyline+1, yycolumn+1);
        
    }
    private Token symbol(TOKEN_TYPE t, Object value) {
        ntk++;
        return new Token(t, value, yyline+1, yycolumn+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
      ntk = 0; // Isto é copiado direto no construtor do lexer. 
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new RuntimeException("Illegal character <"+yytext()+">");
            }
            // fall through
          case 33: break;
          case 2:
            { 
            }
            // fall through
          case 34: break;
          case 3:
            { return symbol(TOKEN_TYPE.NEGATION);
            }
            // fall through
          case 35: break;
          case 4:
            { return symbol(TOKEN_TYPE.REST);
            }
            // fall through
          case 36: break;
          case 5:
            { return symbol(TOKEN_TYPE.PARENTHESES_OPEN);
            }
            // fall through
          case 37: break;
          case 6:
            { return symbol(TOKEN_TYPE.PARENTHESES_CLOSE);
            }
            // fall through
          case 38: break;
          case 7:
            { return symbol(TOKEN_TYPE.TIMES);
            }
            // fall through
          case 39: break;
          case 8:
            { return symbol(TOKEN_TYPE.PLUS);
            }
            // fall through
          case 40: break;
          case 9:
            { return symbol(TOKEN_TYPE.COMMA);
            }
            // fall through
          case 41: break;
          case 10:
            { return symbol(TOKEN_TYPE.SUBTRACTION);
            }
            // fall through
          case 42: break;
          case 11:
            { return symbol(TOKEN_TYPE.PERIOD);
            }
            // fall through
          case 43: break;
          case 12:
            { return symbol(TOKEN_TYPE.DIVISION);
            }
            // fall through
          case 44: break;
          case 13:
            { return symbol(TOKEN_TYPE.INT, Integer.parseInt(yytext()) );
            }
            // fall through
          case 45: break;
          case 14:
            { return symbol(TOKEN_TYPE.COLON);
            }
            // fall through
          case 46: break;
          case 15:
            { return symbol(TOKEN_TYPE.SEMI);
            }
            // fall through
          case 47: break;
          case 16:
            { return symbol(TOKEN_TYPE.LESS_THAN);
            }
            // fall through
          case 48: break;
          case 17:
            { return symbol(TOKEN_TYPE.EQ);
            }
            // fall through
          case 49: break;
          case 18:
            { return symbol(TOKEN_TYPE.MORE_THAN);
            }
            // fall through
          case 50: break;
          case 19:
            { return symbol(TOKEN_TYPE.TYPE);
            }
            // fall through
          case 51: break;
          case 20:
            { return symbol(TOKEN_TYPE.BRACKETS_OPEN);
            }
            // fall through
          case 52: break;
          case 21:
            { return symbol(TOKEN_TYPE.BRACKETS_CLOSE);
            }
            // fall through
          case 53: break;
          case 22:
            { return symbol(TOKEN_TYPE.ID);
            }
            // fall through
          case 54: break;
          case 23:
            { return symbol(TOKEN_TYPE.BRACES_OPEN);
            }
            // fall through
          case 55: break;
          case 24:
            { return symbol(TOKEN_TYPE.BRACES_CLOSE);
            }
            // fall through
          case 56: break;
          case 25:
            { return symbol(TOKEN_TYPE.DIFFERENT);
            }
            // fall through
          case 57: break;
          case 26:
            { return symbol(TOKEN_TYPE.AND);
            }
            // fall through
          case 58: break;
          case 27:
            { return symbol(TOKEN_TYPE.FLOAT, Float.parseFloat(yytext()) );
            }
            // fall through
          case 59: break;
          case 28:
            { return symbol(TOKEN_TYPE.TWO_COLON);
            }
            // fall through
          case 60: break;
          case 29:
            { return symbol(TOKEN_TYPE.EQ_LOGIC);
            }
            // fall through
          case 61: break;
          case 30:
            { return symbol(TOKEN_TYPE.CHAR);
            }
            // fall through
          case 62: break;
          case 31:
            { return symbol(TOKEN_TYPE.NULL);
            }
            // fall through
          case 63: break;
          case 32:
            { return symbol(TOKEN_TYPE.BOOL);
            }
            // fall through
          case 64: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

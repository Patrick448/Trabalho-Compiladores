group jasmin;

prog(name, funclist, datalist) ::= <<
.source <name>
.class public <name>
.super java/lang/Object

    <funclist>

    .method public static main([Ljava/lang/String;)V
        .limit stack 1
        invokestatic <name>/_main()I
        return
    .end method
>>


funclist(funcs) ::= <<
<funcs; separator="\n\n">
>>

datalist(datas) ::= <<
<datas; separator="\n\n">
>>

data(name, declist) ::= <<
.class public <name>
.super java/lang/Object
>>

declist(decls) ::=<<
<decls; separator="\n">
>>

decl(type, name) ::=<<
public <type> <name>;
>>

var_decl(type, name) ::=<<
<type> <name>;
>>

paramslist(params) ::= <<
<params; separator=", ">
>>


cmdlist(cmds, variables) ::= <<
<variables; separator="\n">
<cmds; separator="\n">
>>

func(returntypes, name, paramslist, cmdlist, stack, decls) ::= <<
.method static <name>(<paramslist>)<returntypes>
    .limit stack <stack>
    .limit locals <decls>
    <cmdlist>
.end method
>>

func2(type, name, params, decl, stmt) ::= <<
static <type> <name>(<params; separator=", ">)
    <if(decl)><decl; separator=";\n">;<endif>
    <stmt>
>>

param(type, id) ::= "<type> <id>"
multiple_returns() ::= "List\<Object>"
array_type(type) ::= "<type>[]"
int_type() ::= "Integer"
float_type() ::= "Float"
boolean_type() ::= "Boolean"
string_type() ::= "String"

print(expr) ::= "System.out.print(<expr>);"
return(expr) ::= "return <expr>;"
read(lvalue) ::= "read <lvalue>;"

iterate(expr, cmdlist, unique_id) ::= <<
int cont<unique_id> =0;
while(cont<unique_id> \< <expr>){
    <cmdlist>
    cont<unique_id>++;
}
>>

if(expr, thn, els) ::= <<
if(<expr>) {
    <thn>
} <if(els)>else {
    <els>
}
<endif>
>>

stmt_list(stmt1, stmt2) ::= <<
<stmt1>
<stmt2>
>>

attr(id, expr, type) ::= "<id> = <if(type)>(<type>)<endif><expr>;"
lvalue(lvalue, expr) ::= "<lvalue><if(expr)>.get(<expr>)<endif>"
lvalue_attribute(lvalue, attr) ::= "<lvalue>.<attr>"

boolean_expr(value) ::= "<value>"
float_expr(value) ::= "<value>"
int_expr(value) ::= "<value>"

new_array(type, expr) ::= "initialize(<expr>,new ArrayList\<<type>>(<expr>))"
new_object(type) ::= "new <type>()"
array(type) ::= "ArrayList\<<type>>"

call(name, args, return) ::= <<
List\<Object> arr = new ArrayList\<Object>();
arr = <name>(<args; separator=", ">);
<return; separator="\n">
>>

callvet(name, args, expr) ::= <<<name>(<args; separator=", ">).get(<expr>)>>

attrReturn(name, expr, type) ::= << <name> = (<type>)arr.get(<expr>);>>

mul_expr(left_expr, right_expr) ::= "(<left_expr> * <right_expr>)"
div_expr(left_expr, right_expr) ::= "(<left_expr> / <right_expr>)"
mod_expr(left_expr, right_expr) ::= "(<left_expr> % <right_expr>)"
add_expr(left_expr, right_expr) ::= "(<left_expr> + <right_expr>)"
sub_expr(left_expr, right_expr) ::= "(<left_expr> - <right_expr>)"

lt_expr(left_expr, right_expr) ::= "(<left_expr> \< <right_expr>)"
gt_expr(left_expr, right_expr) ::= "(<left_expr> > <right_expr>)"
equals_expr(left_expr, right_expr) ::= "(<left_expr> == <right_expr>)"
diff_expr(left_expr, right_expr) ::= "(<left_expr> != <right_expr>)"
and_expr(left_expr, right_expr) ::= "(<left_expr> && <right_expr>)"
not_expr(expr) ::= "!<expr>"
sub_uni_expr(expr) ::= "-<expr>"